#include <msp430.h>

//http://www.ti.com/lit/ml/slap120/slap120.pdf (25)
void NACK_ISR(void);
void TX_ISR(void);

volatile unsigned int count = 0;
volatile unsigned int select = 0;

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  P3SEL |= 0x03;                            // Assign I2C pins to USCI_B0
  UCB0CTL1 |= UCSWRST;                      // Enable SW reset
  UCB0CTL0 = UCMST | UCMODE_3 | UCSYNC;     // I2C Master, synchronous mode
  UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK, keep SW reset
  UCB0I2CSA = 0x00;
  UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
  //UCB0IE = UCNACKIE;             // Enable TX interrupt

  while(1)
  {
    UCB0CTL1 |= UCTR + UCTXSTT;             // I2C TX, start condition
    UCB0IFG &= ~UCTXIFG;
    UCB0CTL1 |= UCTXSTP;
    UCB0IFG &= ~UCSTPIFG;

    while (UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
    if ((UCB0IFG & BIT5))
    {
        UCB0IFG &= ~UCNACKIFG;
    } else {
        __no_operation();
        while(1);
    }
                                            // is TX'd

    if (UCB0I2CSA != 0xFE) {
       UCB0I2CSA = ((count + 1));
        count++;
    }
    else 
        while(1);
  }
}

//------------------------------------------------------------------------------
// The USCIAB0_ISR is structured such that it can be used to transmit any
// number of bytes by pre-loading TXByteCtr with the byte count.
//------------------------------------------------------------------------------
#pragma vector = USCI_B0_VECTOR
__interrupt void USCI_B0_ISR(void)
{
  switch(__even_in_range(UCB0IV,12))
  {
  case  0: break;                           // Vector  0: No interrupts
  case  2: break;                           // Vector  2: ALIFG
  case  4:                                  // Vector  4: NACKIFG
      NACK_ISR();
      __bic_SR_register_on_exit(LPM0_bits);
      break;
  case  6: break;                           // Vector  6: STTIFG
  case  8: break;                           // Vector  8: STPIFG
  case 10: break;                           // Vector 10: RXIFG
  case 12:                                  // Vector 12: TXIFG
      TX_ISR();
      break;
  default: break;
  }
}

void NACK_ISR(void)
{
    UCB0IFG &= ~UCNACKIFG;
}

void TX_ISR(void) //DEC BYTE COUNTER HANDLE DATA SEND 'STOP' IF LAST BYTE IF ALL DATA RX'd EXIT LPM0 ON RETI   
{
    if (UCTXSTT) UCB0IFG &= ~UCTXIFG;
    else { unsigned int SlaveAddress = UCB0I2CSA; for(;;); }
}
